#!/bin/bash

DEBUG=true
CONTROLLER_STATE=0
#LAST_TEMP_SETTING
SLEEP_INTERVAL=1             # in s
COOLDOWN_HYSTERESIS=6000     # in mK
COOLDOWN_INITIAL_DELAY=30    # in s
COOLDOWN_STEP=1000           # in mK
COOLDOWN_STEP_DURATION=10    # in s

# Set temps (in degrees C * 1000) and corresponding pwm values in ascending order and with the same amount of values
TEMPS=( 65000 80000 90000 )
PWMS=(      0   153   255 )

# Hwmon paths, hardcoded for one amdgpu card, adjust as needed
FILE_PWM=$(echo /sys/class/drm/card0/device/hwmon/hwmon?/pwm1)
FILE_FANMODE=$(echo /sys/class/drm/card0/device/hwmon/hwmon?/pwm1_enable)
FILE_TEMP=$(echo /sys/class/drm/card0/device/hwmon/hwmon?/temp1_input)
# Might want to use this later
#FILE_TEMP_CRIT=$(echo /sys/class/hwmon/hwmon?/temp1_crit_hyst)

# Load configuration file if present
[ -f /etc/amdgpu-fancontrol.cfg ] && . /etc/amdgpu-fancontrol.cfg

[[ -f "${FILE_PWM}" && -f "${FILE_FANMODE}" && -f "${FILE_TEMP}" ]] || { echo "Invalid hwmon files" ; exit 1; }

# Check if amount of temps and pwm values match
if [ "${#TEMPS[@]}" -ne "${#PWMS[@]}" ]; then
	echo "Amounts of temperature and PWM values do not match"
	exit 1
fi

# Checking for privileges
if [ "${UID}" -ne 0 ]; then
	echo "Writing to sysfs requires privileges, relaunch as root"
	exit 1
fi

function debug {
	if "${DEBUG}"; then
		echo "${1}"
	fi
}

# Set fan mode to max(0), manual(1) or auto(2)
function set_fanmode {
	echo "Setting fanmode to ${1}"
	echo "${1}" > "${FILE_FANMODE}"
}

function set_pwm {
	NEW_PWM="${1}"
	OLD_PWM=$(cat ${FILE_PWM})

	debug "Current PWM value is ${OLD_PWM}, requested to set to ${NEW_PWM}"
	if [ $(cat "${FILE_FANMODE}") -ne 1 ]; then
		echo "Fanmode not set to manual"
		set_fanmode 1
	fi

	debug "Changing PWM value to $NEW_PWM"
	echo "$NEW_PWM" > "$FILE_PWM"
}

function interpolate_pwm {
	i=0
	TEMP="${1}"
	debug "Interpolating PWM value for temperature ${TEMP}"

	if [[ "${TEMP}" -le "${TEMPS[0]}" ]]; then
		# Below first point in list, set to min speed
		set_pwm "${PWMS[i]}"
		return
	elif [[ "${TEMP}" -gt "${TEMPS[-1]}" ]]; then
		# Above last point in list, set to max speed
		set_pwm "${PWMS[-1]}"
		return
	fi

	for i in "${!TEMPS[@]}"; do
		if [[ "${TEMP}" -gt "${TEMPS[$i]}" ]]; then
			continue
		fi

		# Interpolate linearly
		LOWERTEMP="${TEMPS[i-1]}"
		HIGHERTEMP="${TEMPS[i]}"
		LOWERPWM="${PWMS[i-1]}"
		HIGHERPWM="${PWMS[i]}"
		PWM=$(echo "( ( ${TEMP} - ${LOWERTEMP} ) * ( ${HIGHERPWM} - ${LOWERPWM} ) / ( ${HIGHERTEMP} - ${LOWERTEMP} ) ) + ${LOWERPWM}" | bc)
		debug "Interpolated PWM value for temperature ${TEMP} is ${PWM}"
		set_pwm "${PWM}"
		return
	done
}

function update_temperature {
	ACTUAL_TEMP=$(cat "${FILE_TEMP}")
	debug "Current temperature is ${ACTUAL_TEMP}, last setting was for ${LAST_TEMP_SETTING}"

	if [ -z "${LAST_TEMP_SETTING}" ] || [ "${ACTUAL_TEMP}" -gt "${LAST_TEMP_SETTING}" ]; then
		CONTROLLER_STATE=0
		LAST_TEMP_SETTING="${ACTUAL_TEMP}"
		debug "Temperature increased, adjusting immediately"
		interpolate_pwm "${ACTUAL_TEMP}"

	elif [[ "${CONTROLLER_STATE}" -eq 0 && $((ACTUAL_TEMP + COOLDOWN_HYSTERESIS)) -le "${LAST_TEMP_SETTING}" ]]; then
		CONTROLLER_STATE=1
		SECONDS=0
		debug "Temperature reached hysteresis threshold of $((LAST_TEMP_SETTING - COOLDOWN_HYSTERESIS)), starting initial cooldown delay of ${COOLDOWN_INITIAL_DELAY} seconds"

	elif [[ ("${CONTROLLER_STATE}" -eq 1 && "${SECONDS}" -ge "${COOLDOWN_INITIAL_DELAY}") || ("${CONTROLLER_STATE}" -eq 2 && "${SECONDS}" -ge "${COOLDOWN_STEP_DURATION}") ]]; then
		CONTROLLER_STATE=2
		SECONDS=0
		TEMP_SETTING=$((LAST_TEMP_SETTING - COOLDOWN_STEP))
		debug "Entering cooldown step with temperature ${TEMP_SETTING} for ${COOLDOWN_STEP_DURATION} seconds"
		LAST_TEMP_SETTING="${TEMP_SETTING}"
		interpolate_pwm "${TEMP_SETTING}"

	else
		debug "No action necessary (timer is at ${SECONDS} seconds)"

	fi
}

function reset_on_exit {
	echo "Exiting, resetting fan to auto control ..."
	set_fanmode 2
	exit 0
}

# Always try to reset fans on exit
trap "reset_on_exit" SIGINT SIGTERM

function run_daemon {
	while :; do
		update_temperature
		debug
		sleep $SLEEP_INTERVAL
	done
}

# Set fan control to manual
set_fanmode 1

# Finally start the loop
run_daemon
